// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.1
// source: mocks.proto

package mocks

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Simple struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field1        string                 `protobuf:"bytes,1,opt,name=Field1,proto3" json:"Field1,omitempty"`
	Field2        int32                  `protobuf:"varint,2,opt,name=Field2,proto3" json:"Field2,omitempty"`
	Repeated      []string               `protobuf:"bytes,3,rep,name=Repeated,proto3" json:"Repeated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Simple) Reset() {
	*x = Simple{}
	mi := &file_mocks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Simple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Simple) ProtoMessage() {}

func (x *Simple) ProtoReflect() protoreflect.Message {
	mi := &file_mocks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Simple.ProtoReflect.Descriptor instead.
func (*Simple) Descriptor() ([]byte, []int) {
	return file_mocks_proto_rawDescGZIP(), []int{0}
}

func (x *Simple) GetField1() string {
	if x != nil {
		return x.Field1
	}
	return ""
}

func (x *Simple) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Simple) GetRepeated() []string {
	if x != nil {
		return x.Repeated
	}
	return nil
}

type Complex struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field1        string                 `protobuf:"bytes,1,opt,name=Field1,proto3" json:"Field1,omitempty"`
	Field2        int32                  `protobuf:"varint,2,opt,name=Field2,proto3" json:"Field2,omitempty"`
	Nested        *Simple                `protobuf:"bytes,3,opt,name=Nested,proto3" json:"Nested,omitempty"`
	Repeated      []*Simple              `protobuf:"bytes,4,rep,name=Repeated,proto3" json:"Repeated,omitempty"`
	Map           map[string]*Simple     `protobuf:"bytes,5,rep,name=Map,proto3" json:"Map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Complex) Reset() {
	*x = Complex{}
	mi := &file_mocks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Complex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Complex) ProtoMessage() {}

func (x *Complex) ProtoReflect() protoreflect.Message {
	mi := &file_mocks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Complex.ProtoReflect.Descriptor instead.
func (*Complex) Descriptor() ([]byte, []int) {
	return file_mocks_proto_rawDescGZIP(), []int{1}
}

func (x *Complex) GetField1() string {
	if x != nil {
		return x.Field1
	}
	return ""
}

func (x *Complex) GetField2() int32 {
	if x != nil {
		return x.Field2
	}
	return 0
}

func (x *Complex) GetNested() *Simple {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *Complex) GetRepeated() []*Simple {
	if x != nil {
		return x.Repeated
	}
	return nil
}

func (x *Complex) GetMap() map[string]*Simple {
	if x != nil {
		return x.Map
	}
	return nil
}

var File_mocks_proto protoreflect.FileDescriptor

var file_mocks_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0x54, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x25, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x08, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x4d, 0x61, 0x70, 0x1a, 0x45, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x67, 0x72, 0x7a, 0x6c, 0x2f, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mocks_proto_rawDescOnce sync.Once
	file_mocks_proto_rawDescData = file_mocks_proto_rawDesc
)

func file_mocks_proto_rawDescGZIP() []byte {
	file_mocks_proto_rawDescOnce.Do(func() {
		file_mocks_proto_rawDescData = protoimpl.X.CompressGZIP(file_mocks_proto_rawDescData)
	})
	return file_mocks_proto_rawDescData
}

var file_mocks_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mocks_proto_goTypes = []any{
	(*Simple)(nil),  // 0: mocks.Simple
	(*Complex)(nil), // 1: mocks.Complex
	nil,             // 2: mocks.Complex.MapEntry
}
var file_mocks_proto_depIdxs = []int32{
	0, // 0: mocks.Complex.Nested:type_name -> mocks.Simple
	0, // 1: mocks.Complex.Repeated:type_name -> mocks.Simple
	2, // 2: mocks.Complex.Map:type_name -> mocks.Complex.MapEntry
	0, // 3: mocks.Complex.MapEntry.value:type_name -> mocks.Simple
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_mocks_proto_init() }
func file_mocks_proto_init() {
	if File_mocks_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mocks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mocks_proto_goTypes,
		DependencyIndexes: file_mocks_proto_depIdxs,
		MessageInfos:      file_mocks_proto_msgTypes,
	}.Build()
	File_mocks_proto = out.File
	file_mocks_proto_rawDesc = nil
	file_mocks_proto_goTypes = nil
	file_mocks_proto_depIdxs = nil
}
